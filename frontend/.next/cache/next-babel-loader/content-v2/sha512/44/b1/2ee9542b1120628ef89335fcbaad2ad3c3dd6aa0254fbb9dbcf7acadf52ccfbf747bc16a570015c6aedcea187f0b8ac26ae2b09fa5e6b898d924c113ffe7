{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"/Users/sahilkamboj/Desktop/Coding/Github/Web_Dev/mycollage2/frontend/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/sahilkamboj/Desktop/Coding/Github/Web_Dev/mycollage2/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/Users/sahilkamboj/Desktop/Coding/Github/Web_Dev/mycollage2/frontend/pages/components/SignUp.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { Box, Button, Typography } from \"@material-ui/core\";\nimport { useState, useContext } from \"react\";\nimport FormInput from \"../util/components/FormInput\";\nimport { SignUpContext } from \"../index\";\nimport { sleep } from \"../util/methods\";\n\nvar SignUp = function SignUp() {\n  _s();\n\n  // final values\n  var _useState = useState(false),\n      shouldChange = _useState[0],\n      setShouldChange = _useState[1];\n\n  var account = useContext(SignUpContext); // const [errors, setErrors] = useState<string[]>([]);\n\n  var inputs = [\"First name\", \"Last name\", \"Username\", \"Email\", \"Password\"];\n  var helperTexts = [\"\", \"\", \"Get creative!\", \"Your email won't be shared.\", \"Passwords are hashed.\"];\n  var inputTypes = [\"text\", \"text\", \"text\", \"email\", \"password\"];\n\n  var initiateChange = function initiateChange() {\n    setShouldChange(!shouldChange);\n  };\n\n  var handleSubmit = function handleSubmit(e) {\n    e.preventDefault();\n    initiateChange();\n    createAccount(account);\n  };\n\n  var createAccount = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(account) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return sleep(5);\n\n            case 2:\n              fetch(\"http://localhost:5000/accounts/create\", {\n                method: \"POST\",\n                headers: {\n                  \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify(account)\n              }).then(function (res) {\n                return res.json();\n              }).then(function (data) {\n                console.log(data); // if (data[\"errors\"].length > 0) {\n                //   let newErrors: string[] = [];\n                //   data[\"errors\"].map((error) => newErrors.push(error[\"message\"]));\n                //   setErrors(newErrors);\n                // }\n              });\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function createAccount(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h2\",\n      children: \"Sign Up\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(\"form\", {\n      method: \"POST\",\n      onSubmit: handleSubmit,\n      children: [inputs.map(function (input, i) {\n        return /*#__PURE__*/_jsxDEV(FormInput, {\n          id: \"\".concat(input, \"-input\"),\n          signUpShouldChange: shouldChange,\n          logInShouldChange: false,\n          inputLabel: input,\n          helperText: helperTexts[i],\n          isRequired: true,\n          inputType: inputTypes[i]\n        }, input, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, _this);\n      }), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(SignUp, \"ChCfEKpm9ELlAmUO8sOrDuL3qd0=\");\n\n_c = SignUp;\nexport default SignUp;\n\nvar _c;\n\n$RefreshReg$(_c, \"SignUp\");","map":{"version":3,"sources":["/Users/sahilkamboj/Desktop/Coding/Github/Web_Dev/mycollage2/frontend/pages/components/SignUp.tsx"],"names":["Box","Button","Typography","useState","useContext","FormInput","SignUpContext","sleep","SignUp","shouldChange","setShouldChange","account","inputs","helperTexts","inputTypes","initiateChange","handleSubmit","e","preventDefault","createAccount","fetch","method","headers","body","JSON","stringify","then","res","json","data","console","log","map","input","i"],"mappings":"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","sourcesContent":["import { Box, Button, Typography } from \"@material-ui/core\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport { useState, useContext } from \"react\";\n\nimport FormInput from \"../util/components/FormInput\";\nimport AccountInterface from \"../interfaces/AccountInterface\";\nimport { SignUpContext } from \"../index\";\nimport { sleep } from \"../util/methods\";\n\nconst SignUp = () => {\n  // final values\n  const [shouldChange, setShouldChange] = useState(false);\n  const account = useContext(SignUpContext);\n  // const [errors, setErrors] = useState<string[]>([]);\n\n  const inputs: string[] = [\n    \"First name\",\n    \"Last name\",\n    \"Username\",\n    \"Email\",\n    \"Password\",\n  ];\n  const helperTexts: string[] = [\n    \"\",\n    \"\",\n    \"Get creative!\",\n    \"Your email won't be shared.\",\n    \"Passwords are hashed.\",\n  ];\n  const inputTypes: string[] = [\"text\", \"text\", \"text\", \"email\", \"password\"];\n\n  const initiateChange = () => {\n    setShouldChange(!shouldChange);\n  };\n\n  const handleSubmit = (e: { preventDefault: () => void }) => {\n    e.preventDefault();\n    initiateChange();\n    createAccount(account);\n  };\n\n  const createAccount = async (account: AccountInterface) => {\n    await sleep(5);\n    fetch(\"http://localhost:5000/accounts/create\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(account),\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        console.log(data);\n        // if (data[\"errors\"].length > 0) {\n        //   let newErrors: string[] = [];\n        //   data[\"errors\"].map((error) => newErrors.push(error[\"message\"]));\n        //   setErrors(newErrors);\n        // }\n      });\n  };\n\n  return (\n    <Box>\n      <Typography variant=\"h2\">Sign Up</Typography>\n      <form method=\"POST\" onSubmit={handleSubmit}>\n        {inputs.map((input: string, i: number) => (\n          <FormInput\n            key={input}\n            id={`${input}-input`}\n            signUpShouldChange={shouldChange}\n            logInShouldChange={false}\n            inputLabel={input}\n            helperText={helperTexts[i]}\n            isRequired={true}\n            inputType={inputTypes[i]}\n          />\n        ))}\n        <Button variant=\"contained\" color=\"primary\" type=\"submit\">\n          Submit\n        </Button>\n        {/* {errors.map((error) => (\n          <Alert key={error} severity=\"error\">\n            {error}\n          </Alert>\n        ))} */}\n      </form>\n    </Box>\n  );\n};\n\nexport default SignUp;\n"]},"metadata":{},"sourceType":"module"}