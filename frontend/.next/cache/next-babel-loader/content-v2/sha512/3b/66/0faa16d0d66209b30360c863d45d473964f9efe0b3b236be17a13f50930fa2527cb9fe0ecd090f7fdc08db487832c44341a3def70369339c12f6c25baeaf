{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/sahilkamboj/Desktop/Coding/Github/Web_Dev/mycollage2/frontend/pages/components/LogIn.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { Box, Typography, Button, Container } from \"@material-ui/core\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport React, { useState, useContext } from \"react\";\nimport FormInput from \"../util/components/FormInput\";\nimport { LogInContext } from \"../index\";\nimport { sleep } from \"../util/logic\";\n\nvar Login = function Login() {\n  _s();\n\n  var _useState = useState(false),\n      shouldChange = _useState[0],\n      setShouldChange = _useState[1];\n\n  var _useState2 = useState([]),\n      errors = _useState2[0],\n      setErrors = _useState2[1];\n\n  var inputs = [\"Email\", \"Password\"];\n  var inputTypes = [\"email\", \"password\"];\n  var account = useContext(LogInContext);\n\n  var initiateChange = function initiateChange() {\n    setShouldChange(!shouldChange);\n    sleep(5);\n  };\n\n  var handleSubmit = function handleSubmit(e) {\n    e.preventDefault();\n    initiateChange();\n    loginAccount(account);\n  };\n\n  var loginAccount = function loginAccount(account) {\n    fetch(\"http://localhost:5000/accounts/login\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(account)\n    }).then(function (res) {\n      return res.json();\n    }).then(function (data) {\n      console.log(data);\n\n      if (data[\"errors\"].length > 0) {\n        var newErrors = [];\n        data[\"errors\"].map(function (error) {\n          return newErrors.push(error[\"message\"]);\n        });\n        setErrors(newErrors);\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: [/*#__PURE__*/_jsxDEV(Container, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, _this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h2\",\n      children: \"Log In\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, _this), /*#__PURE__*/_jsxDEV(\"form\", {\n      method: \"POST\",\n      onSubmit: handleSubmit,\n      children: [inputs.map(function (input, i) {\n        return /*#__PURE__*/_jsxDEV(FormInput, {\n          id: \"\".concat(input, \"-input\"),\n          logInShouldChange: shouldChange,\n          signUpShouldChange: false,\n          inputLabel: input,\n          isRequired: true,\n          inputType: inputTypes[i]\n        }, input, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 21\n        }, _this);\n      }), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        type: \"submit\",\n        children: \"Log In\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, _this), errors.map(function (error) {\n        return /*#__PURE__*/_jsxDEV(Alert, {\n          severity: \"error\",\n          children: error\n        }, error, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 21\n        }, _this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, _this);\n};\n\n_s(Login, \"fOzkmxl902LukjdVcPYfmtxJy5o=\");\n\n_c = Login;\nexport default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["/Users/sahilkamboj/Desktop/Coding/Github/Web_Dev/mycollage2/frontend/pages/components/LogIn.tsx"],"names":["Box","Typography","Button","Container","Alert","React","useState","useContext","FormInput","LogInContext","sleep","Login","shouldChange","setShouldChange","errors","setErrors","inputs","inputTypes","account","initiateChange","handleSubmit","e","preventDefault","loginAccount","fetch","method","headers","body","JSON","stringify","then","res","json","data","console","log","length","newErrors","map","error","push","input","i"],"mappings":"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","sourcesContent":["import {Box, Typography, Button, Container} from \"@material-ui/core\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport React, {useState, useContext} from \"react\";\n\nimport FormInput from \"../util/components/FormInput\";\nimport {LogInContext} from \"../index\";\nimport AccountInterface from \"../interfaces/AccountInterface\";\nimport {sleep} from \"../util/logic\";\n\nconst Login = () =>\n{\n    const [shouldChange, setShouldChange] = useState<boolean>(false);\n    const [errors, setErrors] = useState<string[]>([]);\n\n    const inputs = [\"Email\", \"Password\"];\n    const inputTypes = [\"email\", \"password\"];\n    const account = useContext(LogInContext);\n\n    const initiateChange = () =>\n    {\n        setShouldChange(!shouldChange);\n        sleep(5);\n    };\n    const handleSubmit = (e: {preventDefault: () => void;}) =>\n    {\n        e.preventDefault();\n        initiateChange();\n        loginAccount(account);\n    };\n\n    const loginAccount = (account: AccountInterface) =>\n    {\n        fetch(\"http://localhost:5000/accounts/login\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify(account),\n        })\n            .then((res) => res.json())\n            .then((data) =>\n            {\n                console.log(data);\n                if (data[\"errors\"].length > 0) {\n                    let newErrors: string[] = [];\n                    data[\"errors\"].map((error) => newErrors.push(error[\"message\"]));\n                    setErrors(newErrors);\n                }\n            });\n    };\n\n    return (\n        <Box>\n            <Container />\n            <Typography variant=\"h2\">Log In</Typography>\n            <form method=\"POST\" onSubmit={handleSubmit}>\n                {inputs.map((input, i) => (\n                    <FormInput\n                        key={input}\n                        id={`${input}-input`}\n                        logInShouldChange={shouldChange}\n                        signUpShouldChange={false}\n                        inputLabel={input}\n                        isRequired={true}\n                        inputType={inputTypes[i]}\n                    />\n                ))}\n                <Button variant=\"contained\" color=\"primary\" type=\"submit\">\n                    Log In\n        </Button>\n                {errors.map((error) => (\n                    <Alert key={error} severity=\"error\">\n                        {error}\n                    </Alert>\n                ))}\n            </form>\n        </Box>\n    );\n};\n\nexport default Login;\n"]},"metadata":{},"sourceType":"module"}