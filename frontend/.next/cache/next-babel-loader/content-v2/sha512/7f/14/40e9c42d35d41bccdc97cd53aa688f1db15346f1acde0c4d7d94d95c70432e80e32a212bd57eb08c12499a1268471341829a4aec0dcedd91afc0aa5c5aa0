{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/sahilkamboj/Desktop/Coding/Github/Web_Dev/mycollage2/frontend/pages/signup.tsx\";\nimport { Box, Typography, Button } from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\nimport React, { useState } from \"react\";\nimport { useCookies } from \"react-cookie\";\nimport FormInput from \"./util/components/FormInput\";\n\nconst SignUp = () => {\n  // set user-uuid cookie\n  const [userIDCookie, setUserIDCookie] = useCookies([\"userUUID\"]);\n  const {\n    0: errors,\n    1: setErrors\n  } = useState([]);\n  const {\n    0: username,\n    1: setUsername\n  } = useState(\"\");\n  const {\n    0: firstName,\n    1: setFirstName\n  } = useState(\"\");\n  const {\n    0: lastName,\n    1: setLastName\n  } = useState(\"\");\n  const {\n    0: email,\n    1: setEmail\n  } = useState(\"\");\n  const {\n    0: password,\n    1: setPassword\n  } = useState(\"\");\n  const inputTypes = [\"text\", \"text\", \"text\", \"email\", \"password\"];\n  const values = [firstName, lastName, username, email, password];\n  const setValues = [setFirstName, setLastName, setUsername, setEmail, setPassword];\n\n  const signUpAccount = () => {\n    console.log(firstName, lastName, username, email, password); //    fetch(\"http://localhost:5000/accounts/signUp\", {\n    //      method: \"POST\",\n    //      headers: {\n    //        \"Content-Type\": \"application/json\",\n    //      },\n    //      body: JSON.stringify({ email, password }),\n    //    })\n    //      .then((res) => res.json())\n    //      .then((data) => {\n    //        //        console.log(data);\n    //        if (data[\"errors\"]) {\n    //          let newErrors: string[] = [];\n    //          data[\"errors\"].map((error) => newErrors.push(error[\"message\"]));\n    //          setErrors(newErrors);\n    //        } else {\n    //          setErrors([]);\n    //          console.log(data[\"accounts\"][0].uuid);\n    //          setUserIDCookie(\"userUUID\", data[\"accounts\"][0].uuid, { path: \"/\" });\n    //          console.log(\"user uuid cookie set\");\n    //        }\n    //      });\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    signUpAccount();\n  };\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h2\",\n      children: \"Sign Up\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      method: \"POST\",\n      onSubmit: handleSubmit,\n      children: [inputTypes.map((inputType, i) => /*#__PURE__*/_jsxDEV(FormInput, {\n        id: `${inputType}-input`,\n        inputLabel: inputType.toUpperCase(),\n        inputType: inputType,\n        isRequired: true,\n        value: values[i],\n        setValue: setValues[i]\n      }, inputType, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        type: \"submit\",\n        children: \"Log In\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), errors.map(error => /*#__PURE__*/_jsxDEV(Alert, {\n        severity: \"error\",\n        children: error\n      }, error, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n\nexport default SignUp;","map":{"version":3,"sources":["/Users/sahilkamboj/Desktop/Coding/Github/Web_Dev/mycollage2/frontend/pages/signup.tsx"],"names":["Box","Typography","Button","Alert","React","useState","useCookies","FormInput","SignUp","userIDCookie","setUserIDCookie","errors","setErrors","username","setUsername","firstName","setFirstName","lastName","setLastName","email","setEmail","password","setPassword","inputTypes","values","setValues","signUpAccount","console","log","handleSubmit","e","preventDefault","map","inputType","i","toUpperCase","error"],"mappings":"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","sourcesContent":["import { Box, Typography, Button } from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\nimport React, { useState } from \"react\";\nimport { useCookies } from \"react-cookie\";\nimport FormInput from \"./util/components/FormInput\";\n\nconst SignUp = () => {\n  // set user-uuid cookie\n  const [userIDCookie, setUserIDCookie] = useCookies([\"userUUID\"]);\n  const [errors, setErrors] = useState<string[]>([]);\n\n  const [username, setUsername] = useState<string>(\"\");\n  const [firstName, setFirstName] = useState<string>(\"\");\n  const [lastName, setLastName] = useState<string>(\"\");\n  const [email, setEmail] = useState<string>(\"\");\n  const [password, setPassword] = useState<string>(\"\");\n\n  const inputTypes = [\"text\", \"text\", \"text\", \"email\", \"password\"];\n  const values = [firstName, lastName, username, email, password];\n  const setValues = [\n    setFirstName,\n    setLastName,\n    setUsername,\n    setEmail,\n    setPassword,\n  ];\n\n  const signUpAccount = () => {\n    console.log(firstName, lastName, username, email, password);\n    //    fetch(\"http://localhost:5000/accounts/signUp\", {\n    //      method: \"POST\",\n    //      headers: {\n    //        \"Content-Type\": \"application/json\",\n    //      },\n    //      body: JSON.stringify({ email, password }),\n    //    })\n    //      .then((res) => res.json())\n    //      .then((data) => {\n    //        //        console.log(data);\n    //        if (data[\"errors\"]) {\n    //          let newErrors: string[] = [];\n    //          data[\"errors\"].map((error) => newErrors.push(error[\"message\"]));\n    //          setErrors(newErrors);\n    //        } else {\n    //          setErrors([]);\n    //          console.log(data[\"accounts\"][0].uuid);\n    //          setUserIDCookie(\"userUUID\", data[\"accounts\"][0].uuid, { path: \"/\" });\n    //          console.log(\"user uuid cookie set\");\n    //        }\n    //      });\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    signUpAccount();\n  };\n\n  return (\n    <Box>\n      <Typography variant=\"h2\">Sign Up</Typography>\n      <form method=\"POST\" onSubmit={handleSubmit}>\n        {inputTypes.map((inputType, i) => (\n          <FormInput\n            key={inputType}\n            id={`${inputType}-input`}\n            inputLabel={inputType.toUpperCase()}\n            inputType={inputType}\n            isRequired={true}\n            value={values[i]}\n            setValue={setValues[i]}\n          />\n        ))}\n\n        <Button variant=\"contained\" color=\"primary\" type=\"submit\">\n          Log In\n        </Button>\n        {errors.map((error) => (\n          <Alert key={error} severity=\"error\">\n            {error}\n          </Alert>\n        ))}\n      </form>\n    </Box>\n  );\n};\n\nexport default SignUp;\n"]},"metadata":{},"sourceType":"module"}