{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _slicedToArray from \"/Users/sahilkamboj/Desktop/Coding/Github/Web_Dev/mycollage2/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/sahilkamboj/Desktop/Coding/Github/Web_Dev/mycollage2/frontend/pages/util/components/FormInput.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { FormControl, InputLabel, Input, FormHelperText } from \"@material-ui/core\";\nimport React, { useEffect } from \"react\"; //    , useState, useContext } from \"react\";\n//import { SignUpContext } from \"../../index\";\n//import { LogInContext } from \"../../index\";\n\nvar FormInput = function FormInput(_ref) {\n  _s();\n\n  var id = _ref.id,\n      signUpShouldChange = _ref.signUpShouldChange,\n      logInShouldChange = _ref.logInShouldChange,\n      _ref$inputLabel = _ref.inputLabel,\n      inputLabel = _ref$inputLabel === void 0 ? \"\" : _ref$inputLabel,\n      _ref$helperText = _ref.helperText,\n      helperText = _ref$helperText === void 0 ? \"\" : _ref$helperText,\n      _ref$isRequired = _ref.isRequired,\n      isRequired = _ref$isRequired === void 0 ? false : _ref$isRequired,\n      _ref$inputType = _ref.inputType,\n      inputType = _ref$inputType === void 0 ? \"text\" : _ref$inputType;\n  var signUpAccount = useContext(SignUpContext);\n  var logInAccount = useContext(LogInContext);\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      value = _useState2[0],\n      setValue = _useState2[1];\n\n  useEffect(function () {\n    switch (inputLabel) {\n      case \"First name\":\n        signUpAccount.firstName = value;\n        break;\n\n      case \"Last name\":\n        signUpAccount.lastName = value;\n        break;\n\n      case \"Username\":\n        signUpAccount.username = value;\n        break;\n\n      case \"Email\":\n        signUpAccount.email = value;\n        break;\n\n      case \"Password\":\n        signUpAccount.password = value;\n        break;\n\n      default:\n        break;\n    }\n  }, [signUpShouldChange]);\n  useEffect(function () {\n    switch (inputLabel) {\n      case \"Email\":\n        logInAccount.email = value;\n        break;\n\n      case \"Password\":\n        logInAccount.password = value;\n        break;\n\n      default:\n        break;\n    }\n  }, [logInShouldChange]);\n\n  var handleValueChange = function handleValueChange(e) {\n    setValue(e.target.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(FormControl, {\n    id: \"formcontrol\",\n    children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n      htmlFor: \"input\",\n      \"aria-describedby\": \"helper-text\",\n      children: inputLabel\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(Input, {\n      id: id,\n      required: isRequired,\n      type: inputType,\n      value: value,\n      onChange: handleValueChange,\n      fullWidth: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(FormHelperText, {\n      id: \"helper-text\",\n      children: helperText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(FormInput, \"Z4ihBBcKgU4eH+8PkRhAnht0Jjw=\");\n\n_c = FormInput;\nexport default FormInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"FormInput\");","map":{"version":3,"sources":["/Users/sahilkamboj/Desktop/Coding/Github/Web_Dev/mycollage2/frontend/pages/util/components/FormInput.tsx"],"names":["FormControl","InputLabel","Input","FormHelperText","React","useEffect","FormInput","id","signUpShouldChange","logInShouldChange","inputLabel","helperText","isRequired","inputType","signUpAccount","useContext","SignUpContext","logInAccount","LogInContext","useState","value","setValue","firstName","lastName","username","email","password","handleValueChange","e","target"],"mappings":";;;;;;;AAAA,SACEA,WADF,EAEEC,UAFF,EAGEC,KAHF,EAIEC,cAJF,QAKO,mBALP;AAMA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CACA;AAEA;AACA;;AAGA,IAAMC,SAAuC,GAAG,SAA1CA,SAA0C,OAQ1C;AAAA;;AAAA,MAPJC,EAOI,QAPJA,EAOI;AAAA,MANJC,kBAMI,QANJA,kBAMI;AAAA,MALJC,iBAKI,QALJA,iBAKI;AAAA,6BAJJC,UAII;AAAA,MAJJA,UAII,gCAJS,EAIT;AAAA,6BAHJC,UAGI;AAAA,MAHJA,UAGI,gCAHS,EAGT;AAAA,6BAFJC,UAEI;AAAA,MAFJA,UAEI,gCAFS,KAET;AAAA,4BADJC,SACI;AAAA,MADJA,SACI,+BADQ,MACR;AACJ,MAAMC,aAAa,GAAGC,UAAU,CAACC,aAAD,CAAhC;AACA,MAAMC,YAAY,GAAGF,UAAU,CAACG,YAAD,CAA/B;;AAFI,kBAGsBC,QAAQ,CAAC,EAAD,CAH9B;AAAA;AAAA,MAGGC,KAHH;AAAA,MAGUC,QAHV;;AAKJhB,EAAAA,SAAS,CAAC,YAAM;AACd,YAAQK,UAAR;AACE,WAAK,YAAL;AACEI,QAAAA,aAAa,CAACQ,SAAd,GAA0BF,KAA1B;AACA;;AACF,WAAK,WAAL;AACEN,QAAAA,aAAa,CAACS,QAAd,GAAyBH,KAAzB;AACA;;AACF,WAAK,UAAL;AACEN,QAAAA,aAAa,CAACU,QAAd,GAAyBJ,KAAzB;AACA;;AACF,WAAK,OAAL;AACEN,QAAAA,aAAa,CAACW,KAAd,GAAsBL,KAAtB;AACA;;AACF,WAAK,UAAL;AACEN,QAAAA,aAAa,CAACY,QAAd,GAAyBN,KAAzB;AACA;;AACF;AACE;AAjBJ;AAmBD,GApBQ,EAoBN,CAACZ,kBAAD,CApBM,CAAT;AAsBAH,EAAAA,SAAS,CAAC,YAAM;AACd,YAAQK,UAAR;AACE,WAAK,OAAL;AACEO,QAAAA,YAAY,CAACQ,KAAb,GAAqBL,KAArB;AACA;;AACF,WAAK,UAAL;AACEH,QAAAA,YAAY,CAACS,QAAb,GAAwBN,KAAxB;AACA;;AACF;AACE;AARJ;AAUD,GAXQ,EAWN,CAACX,iBAAD,CAXM,CAAT;;AAaA,MAAMkB,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,CAAD,EAEpB;AACJP,IAAAA,QAAQ,CAACO,CAAC,CAACC,MAAF,CAAST,KAAV,CAAR;AACD,GAJD;;AAMA,sBACE,QAAC,WAAD;AAAa,IAAA,EAAE,EAAC,aAAhB;AAAA,4BACE,QAAC,UAAD;AAAY,MAAA,OAAO,EAAC,OAApB;AAA4B,0BAAiB,aAA7C;AAAA,gBACGV;AADH;AAAA;AAAA;AAAA;AAAA,aADF,eAIE,QAAC,KAAD;AACE,MAAA,EAAE,EAAEH,EADN;AAEE,MAAA,QAAQ,EAAEK,UAFZ;AAGE,MAAA,IAAI,EAAEC,SAHR;AAIE,MAAA,KAAK,EAAEO,KAJT;AAKE,MAAA,QAAQ,EAAEO,iBALZ;AAME,MAAA,SAAS,EAAE;AANb;AAAA;AAAA;AAAA;AAAA,aAJF,eAYE,QAAC,cAAD;AAAgB,MAAA,EAAE,EAAC,aAAnB;AAAA,gBAAkChB;AAAlC;AAAA;AAAA;AAAA;AAAA,aAZF;AAAA;AAAA;AAAA;AAAA;AAAA,WADF;AAgBD,CAtED;;GAAML,S;;KAAAA,S;AAwEN,eAAeA,SAAf","sourcesContent":["import {\n  FormControl,\n  InputLabel,\n  Input,\n  FormHelperText,\n} from \"@material-ui/core\";\nimport React, { useEffect } from \"react\";\n//    , useState, useContext } from \"react\";\n\n//import { SignUpContext } from \"../../index\";\n//import { LogInContext } from \"../../index\";\nimport FormInputInterface from \"../../interfaces/FormInputInterface\";\n\nconst FormInput: React.FC<FormInputInterface> = ({\n  id,\n  signUpShouldChange,\n  logInShouldChange,\n  inputLabel = \"\",\n  helperText = \"\",\n  isRequired = false,\n  inputType = \"text\",\n}) => {\n  const signUpAccount = useContext(SignUpContext);\n  const logInAccount = useContext(LogInContext);\n  const [value, setValue] = useState(\"\");\n\n  useEffect(() => {\n    switch (inputLabel) {\n      case \"First name\":\n        signUpAccount.firstName = value;\n        break;\n      case \"Last name\":\n        signUpAccount.lastName = value;\n        break;\n      case \"Username\":\n        signUpAccount.username = value;\n        break;\n      case \"Email\":\n        signUpAccount.email = value;\n        break;\n      case \"Password\":\n        signUpAccount.password = value;\n        break;\n      default:\n        break;\n    }\n  }, [signUpShouldChange]);\n\n  useEffect(() => {\n    switch (inputLabel) {\n      case \"Email\":\n        logInAccount.email = value;\n        break;\n      case \"Password\":\n        logInAccount.password = value;\n        break;\n      default:\n        break;\n    }\n  }, [logInShouldChange]);\n\n  const handleValueChange = (e: {\n    target: { value: React.SetStateAction<string> };\n  }) => {\n    setValue(e.target.value);\n  };\n\n  return (\n    <FormControl id=\"formcontrol\">\n      <InputLabel htmlFor=\"input\" aria-describedby=\"helper-text\">\n        {inputLabel}\n      </InputLabel>\n      <Input\n        id={id}\n        required={isRequired}\n        type={inputType}\n        value={value}\n        onChange={handleValueChange}\n        fullWidth={true}\n      />\n      <FormHelperText id=\"helper-text\">{helperText}</FormHelperText>\n    </FormControl>\n  );\n};\n\nexport default FormInput;\n"]},"metadata":{},"sourceType":"module"}