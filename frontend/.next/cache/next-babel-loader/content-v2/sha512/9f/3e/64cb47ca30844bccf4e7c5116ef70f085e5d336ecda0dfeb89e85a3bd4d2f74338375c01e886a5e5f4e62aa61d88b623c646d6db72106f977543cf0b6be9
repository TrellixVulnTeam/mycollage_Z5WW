{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/sahilkamboj/Desktop/Coding/Github/Web_Dev/mycollage2/frontend/pages/components/Image.tsx\";\nimport { useState, useRef } from \"react\";\nimport Draggable from \"react-draggable\";\nimport { ResizableBox } from \"react-resizable\";\nimport styles from \"../../styles/Image.module.scss\";\n\nconst Image = ({\n  uuid,\n  url,\n  xPos,\n  yPos,\n  rot,\n  width,\n  height\n}) => {\n  // set variable\n  const imgRef = useRef();\n\n  const getData = imgRef => {\n    if (imgRef.current !== undefined) {\n      console.log(imgRef.current.getBoundingClientRect());\n      console.log(screen.width, screen.height);\n      const xPct = 100 * imgRef.current.getBoundingClientRect().left / screen.width;\n      const yPct = 100 * imgRef.current.getBoundingClientRect().top / screen.height;\n      const height = imgRef.current.getBoundingClientRect().height;\n      const width = imgRef.current.getBoundingClientRect().width;\n      console.log(xPct, yPct);\n    }\n  };\n\n  const {\n    0: curXPos,\n    1: setCurXPos\n  } = useState(xPos);\n  const {\n    0: curYPos,\n    1: setCurYPos\n  } = useState(yPos);\n  const {\n    0: curRot,\n    1: setCurRot\n  } = useState(rot);\n  const {\n    0: curWidth,\n    1: setCurWidth\n  } = useState(width);\n  const {\n    0: curHeight,\n    1: setCurHeight\n  } = useState(height);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Draggable, {\n      children: /*#__PURE__*/_jsxDEV(ResizableBox, {\n        width: 1,\n        height: 1,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.draggableDiv,\n          style: {\n            width: `${width}px`,\n            height: `${height}px`\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.innerDiv,\n            style: {\n              width: `${width}px`,\n              height: `${height}px`\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            src: url,\n            className: styles.img,\n            ref: imgRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => getData(imgRef),\n      children: \"Click me\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n\nexport default Image;","map":{"version":3,"sources":["/Users/sahilkamboj/Desktop/Coding/Github/Web_Dev/mycollage2/frontend/pages/components/Image.tsx"],"names":["useState","useRef","Draggable","ResizableBox","styles","Image","uuid","url","xPos","yPos","rot","width","height","imgRef","getData","current","undefined","console","log","getBoundingClientRect","screen","xPct","left","yPct","top","curXPos","setCurXPos","curYPos","setCurYPos","curRot","setCurRot","curWidth","setCurWidth","curHeight","setCurHeight","draggableDiv","innerDiv","img"],"mappings":"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","sourcesContent":["import { useState, useRef } from \"react\";\nimport Draggable from \"react-draggable\";\nimport { ResizableBox } from \"react-resizable\";\nimport { MutableRefObject } from \"react\";\n\nimport styles from \"../../styles/Image.module.scss\";\n\nimport { ImageInterface } from \"../interfaces/ImageInterface\";\n\nconst Image: React.FC<ImageInterface> = ({\n  uuid,\n  url,\n  xPos,\n  yPos,\n  rot,\n  width,\n  height,\n}) => {\n  // set variable\n  const imgRef = useRef();\n\n  const getData = (imgRef: MutableRefObject<undefined>) => {\n    if (imgRef.current !== undefined) {\n      console.log(imgRef.current.getBoundingClientRect());\n      console.log(screen.width, screen.height);\n      const xPct =\n        (100 * imgRef.current.getBoundingClientRect().left) / screen.width;\n      const yPct =\n        (100 * imgRef.current.getBoundingClientRect().top) / screen.height;\n      const height = imgRef.current.getBoundingClientRect().height;\n      const width = imgRef.current.getBoundingClientRect().width;\n      console.log(xPct, yPct);\n    }\n  };\n\n  const [curXPos, setCurXPos] = useState<number>(xPos);\n  const [curYPos, setCurYPos] = useState<number>(yPos);\n  const [curRot, setCurRot] = useState<number>(rot);\n  const [curWidth, setCurWidth] = useState<number>(width);\n  const [curHeight, setCurHeight] = useState<number>(height);\n\n  return (\n    <div>\n      <Draggable>\n        <ResizableBox width={1} height={1}>\n          <div\n            className={styles.draggableDiv}\n            style={{ width: `${width}px`, height: `${height}px` }}\n          >\n            <div\n              className={styles.innerDiv}\n              style={{ width: `${width}px`, height: `${height}px` }}\n            />\n            <img src={url} className={styles.img} ref={imgRef} />\n          </div>\n        </ResizableBox>\n      </Draggable>\n\n      {/* divs for resizing */}\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n      <button onClick={() => getData(imgRef)}>Click me</button>\n    </div>\n  );\n};\n\nexport default Image;\n"]},"metadata":{},"sourceType":"module"}