{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/sahilkamboj/Desktop/Coding/Github/Web_Dev/mycollage2/frontend/pages/components/Image.tsx\";\nimport { useState, useRef } from \"react\";\nimport Draggable from \"react-draggable\"; // import { ResizableBox } from \"react-resizable\";\n// import classnames from \"classnames\";\n\nimport { Resizable } from \"re-resizable\";\nimport { Fragment } from \"react\";\nimport styles from \"../../styles/Image.module.scss\";\n\nconst Image = ({\n  uuid,\n  url,\n  xPos,\n  yPos,\n  rot,\n  width,\n  height\n}) => {\n  // set variable\n  const imgRef = useRef();\n\n  const getData = imgRef => {\n    if (imgRef.current !== undefined) {\n      console.log(imgRef.current.getBoundingClientRect());\n      console.log(screen.width, screen.height);\n      const xPct = 100 * imgRef.current.getBoundingClientRect().left / screen.width;\n      const yPct = 100 * imgRef.current.getBoundingClientRect().top / screen.height;\n      const height = imgRef.current.getBoundingClientRect().height;\n      const width = imgRef.current.getBoundingClientRect().width;\n      console.log(xPct, yPct);\n    }\n  }; // const [curXPos, setCurXPos] = useState<number>(xPos);\n  // const [curYPos, setCurYPos] = useState<number>(yPos);\n\n\n  const {\n    0: curRot,\n    1: setCurRot\n  } = useState(rot);\n  const {\n    0: curWidth,\n    1: setCurWidth\n  } = useState(width);\n  const {\n    0: curHeight,\n    1: setCurHeight\n  } = useState(height);\n\n  const changeWidth = diff => {\n    setCurWidth(curWidth => curWidth + diff);\n  };\n\n  const changeHeight = diff => {\n    setCurHeight(curHeight => curHeight + diff);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Draggable, {\n      children: /*#__PURE__*/_jsxDEV(Resizable, {\n        defaultSize: {\n          width: curWidth,\n          height: curHeight\n        },\n        size: {\n          width: curWidth,\n          height: curHeight\n        },\n        onResizeStop: (e, direction, ref, d) => {\n          console.log(e, direction, ref);\n          console.log(d.width, d.height);\n          changeWidth(d.width);\n          changeHeight(d.height);\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.draggableDiv,\n          style: {\n            width: `${curWidth}px`,\n            height: `${curHeight}px`\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.innerDiv,\n            style: {\n              width: `${curWidth}px`,\n              height: `${curHeight}px`\n            } // style={{ width: `${width}px`, height: `${height}px` }}\n\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            src: url,\n            className: styles.img,\n            ref: imgRef,\n            style: {\n              width: `${curWidth}px`,\n              height: `${curHeight}px`\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n\nexport default Image;","map":{"version":3,"sources":["/Users/sahilkamboj/Desktop/Coding/Github/Web_Dev/mycollage2/frontend/pages/components/Image.tsx"],"names":["useState","useRef","Draggable","Resizable","Fragment","styles","Image","uuid","url","xPos","yPos","rot","width","height","imgRef","getData","current","undefined","console","log","getBoundingClientRect","screen","xPct","left","yPct","top","curRot","setCurRot","curWidth","setCurWidth","curHeight","setCurHeight","changeWidth","diff","changeHeight","e","direction","ref","d","draggableDiv","innerDiv","img"],"mappings":"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","sourcesContent":["import { useState, useRef } from \"react\";\nimport Draggable from \"react-draggable\";\n// import { ResizableBox } from \"react-resizable\";\n// import classnames from \"classnames\";\nimport { Resizable } from \"re-resizable\";\nimport { MutableRefObject, Fragment } from \"react\";\n\nimport styles from \"../../styles/Image.module.scss\";\n\nimport { ImageInterface } from \"../interfaces/ImageInterface\";\n\nconst Image: React.FC<ImageInterface> = ({\n  uuid,\n  url,\n  xPos,\n  yPos,\n  rot,\n  width,\n  height,\n}) => {\n  // set variable\n  const imgRef = useRef();\n\n  const getData = (imgRef: MutableRefObject<undefined>) => {\n    if (imgRef.current !== undefined) {\n      console.log(imgRef.current.getBoundingClientRect());\n      console.log(screen.width, screen.height);\n      const xPct =\n        (100 * imgRef.current.getBoundingClientRect().left) / screen.width;\n      const yPct =\n        (100 * imgRef.current.getBoundingClientRect().top) / screen.height;\n      const height = imgRef.current.getBoundingClientRect().height;\n      const width = imgRef.current.getBoundingClientRect().width;\n      console.log(xPct, yPct);\n    }\n  };\n\n  // const [curXPos, setCurXPos] = useState<number>(xPos);\n  // const [curYPos, setCurYPos] = useState<number>(yPos);\n  const [curRot, setCurRot] = useState<number>(rot);\n  const [curWidth, setCurWidth] = useState<number>(width);\n  const [curHeight, setCurHeight] = useState<number>(height);\n\n  const changeWidth = (diff: number) => {\n    setCurWidth((curWidth) => curWidth + diff);\n  };\n  const changeHeight = (diff: number) => {\n    setCurHeight((curHeight) => curHeight + diff);\n  };\n\n  return (\n    <Fragment>\n      <Draggable>\n        <Resizable\n          defaultSize={{ width: curWidth, height: curHeight }}\n          size={{ width: curWidth, height: curHeight }}\n          onResizeStop={(e, direction, ref, d) => {\n            console.log(e, direction, ref);\n            console.log(d.width, d.height);\n            changeWidth(d.width);\n            changeHeight(d.height);\n          }}\n        >\n          <div\n            className={styles.draggableDiv}\n            style={{ width: `${curWidth}px`, height: `${curHeight}px` }}\n          >\n            <div\n              className={styles.innerDiv}\n              style={{ width: `${curWidth}px`, height: `${curHeight}px` }}\n              // style={{ width: `${width}px`, height: `${height}px` }}\n            />\n            <img\n              src={url}\n              className={styles.img}\n              ref={imgRef}\n              style={{ width: `${curWidth}px`, height: `${curHeight}px` }}\n            />\n            {/* <div className={styles.resizer}></div> */}\n          </div>\n        </Resizable>\n      </Draggable>\n      {/* divs for resizing */}\n      {/* <button onClick={() => getData(imgRef)}>Click me</button> */}\n    </Fragment>\n  );\n};\n\nexport default Image;\n"]},"metadata":{},"sourceType":"module"}