{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/sahilkamboj/Desktop/Coding/Github/Web_Dev/mycollage2/frontend/pages/components/LogIn.tsx\";\nimport { Box, Typography, Button } from \"@material-ui/core\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport React, { useState, useContext } from \"react\";\nimport { useCookies } from \"react-cookie\";\nimport FormInput from \"../util/components/FormInput\";\nimport { LogInContext } from \"../index\";\n\nconst Login = () => {\n  // set user-uuid cookie\n  const [userIDCookie, setUserIDCookie] = useCookies([\"userUUID\"]);\n  const {\n    0: shouldChange,\n    1: setShouldChange\n  } = useState(false);\n  const {\n    0: errors,\n    1: setErrors\n  } = useState([]);\n  const inputs = [\"Email\", \"Password\"];\n  const inputTypes = [\"email\", \"password\"]; // contexts\n\n  const account = useContext(LogInContext);\n\n  const initiateChange = () => {\n    setShouldChange(!shouldChange); //    sleep(10);\n  };\n\n  const loginAccount = account => {\n    fetch(\"http://localhost:5000/accounts/login\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(account)\n    }).then(res => res.json()).then(data => {\n      //        console.log(data);\n      if (data[\"errors\"]) {\n        let newErrors = [];\n        data[\"errors\"].map(error => newErrors.push(error[\"message\"]));\n        setErrors(newErrors);\n      } else {\n        setErrors([]);\n        console.log(data[\"accounts\"][0].uuid);\n        setUserIDCookie(\"userUUID\", data[\"accounts\"][0].uuid, {\n          path: \"/\"\n        });\n        console.log(\"user uuid cookie set\");\n      }\n    });\n  };\n\n  useEffect(() => {\n    loginAccount(account);\n  }, [shouldChange]);\n\n  const handleSubmit = e => {\n    console.log(account);\n    e.preventDefault();\n    initiateChange();\n    loginAccount(account);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h2\",\n      children: \"Log In\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), console.log(), /*#__PURE__*/_jsxDEV(\"form\", {\n      method: \"POST\",\n      onSubmit: handleSubmit,\n      children: [inputs.map((input, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(FormInput, {\n          id: `${input}-input`,\n          logInShouldChange: shouldChange,\n          signUpShouldChange: false,\n          inputLabel: input,\n          isRequired: true,\n          inputType: inputTypes[i]\n        }, input, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 13\n        }, this)\n      }, input, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        type: \"submit\",\n        children: \"Log In\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), errors.map(error => /*#__PURE__*/_jsxDEV(Alert, {\n        severity: \"error\",\n        children: error\n      }, error, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n\nexport default Login;","map":{"version":3,"sources":["/Users/sahilkamboj/Desktop/Coding/Github/Web_Dev/mycollage2/frontend/pages/components/LogIn.tsx"],"names":["Box","Typography","Button","Alert","React","useState","useContext","useCookies","FormInput","LogInContext","Login","userIDCookie","setUserIDCookie","shouldChange","setShouldChange","errors","setErrors","inputs","inputTypes","account","initiateChange","loginAccount","fetch","method","headers","body","JSON","stringify","then","res","json","data","newErrors","map","error","push","console","log","uuid","path","useEffect","handleSubmit","e","preventDefault","input","i"],"mappings":"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","sourcesContent":["import { Box, Typography, Button } from \"@material-ui/core\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport React, { useState, useContext } from \"react\";\nimport { useCookies } from \"react-cookie\";\n\nimport FormInput from \"../util/components/FormInput\";\nimport { LogInContext } from \"../index\";\nimport AccountInterface from \"../interfaces/AccountInterface\";\nimport { sleep } from \"../util/logic\";\n\nconst Login = () => {\n  // set user-uuid cookie\n  const [userIDCookie, setUserIDCookie] = useCookies([\"userUUID\"]);\n\n  const [shouldChange, setShouldChange] = useState<boolean>(false);\n  const [errors, setErrors] = useState<string[]>([]);\n\n  const inputs = [\"Email\", \"Password\"];\n  const inputTypes = [\"email\", \"password\"];\n\n  // contexts\n  const account = useContext(LogInContext);\n\n  const initiateChange = () => {\n    setShouldChange(!shouldChange);\n    //    sleep(10);\n  };\n\n  const loginAccount = (account: AccountInterface) => {\n    fetch(\"http://localhost:5000/accounts/login\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(account),\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        //        console.log(data);\n        if (data[\"errors\"]) {\n          let newErrors: string[] = [];\n          data[\"errors\"].map((error) => newErrors.push(error[\"message\"]));\n          setErrors(newErrors);\n        } else {\n          setErrors([]);\n          console.log(data[\"accounts\"][0].uuid);\n          setUserIDCookie(\"userUUID\", data[\"accounts\"][0].uuid, { path: \"/\" });\n          console.log(\"user uuid cookie set\");\n        }\n      });\n  };\n\n  useEffect(() => {\n    loginAccount(account);\n  }, [shouldChange]);\n\n  const handleSubmit = (e: { preventDefault: () => void }) => {\n    console.log(account);\n    e.preventDefault();\n    initiateChange();\n    loginAccount(account);\n  };\n\n  return (\n    <Box>\n      <Typography variant=\"h2\">Log In</Typography>\n      {console.log()}\n      <form method=\"POST\" onSubmit={handleSubmit}>\n        {inputs.map((input, i) => (\n          <div key={input}>\n            <FormInput\n              key={input}\n              id={`${input}-input`}\n              logInShouldChange={shouldChange}\n              signUpShouldChange={false}\n              inputLabel={input}\n              isRequired={true}\n              inputType={inputTypes[i]}\n            />\n          </div>\n        ))}\n        <Button variant=\"contained\" color=\"primary\" type=\"submit\">\n          Log In\n        </Button>\n        {errors.map((error) => (\n          <Alert key={error} severity=\"error\">\n            {error}\n          </Alert>\n        ))}\n      </form>\n    </Box>\n  );\n};\n\nexport default Login;\n"]},"metadata":{},"sourceType":"module"}